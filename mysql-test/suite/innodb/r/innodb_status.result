# Create a GLOBAL_STATUS view that converts the type of the VARIABLE_VALUE
# from an string to a unsigned integer.
CREATE VIEW gsv AS SELECT VARIABLE_NAME, CONVERT(VARIABLE_VALUE, UNSIGNED)
AS VARIABLE_VALUE FROM INFORMATION_SCHEMA.GLOBAL_STATUS;
#
# Test that the INNODB_LOCK_DEADLOCKS is incremented when a deadlock
# is detected.
#

# Save initial value of the INNODB_LOCK_DEADLOCKS variable.

SELECT VARIABLE_VALUE INTO @deadlocks_1 FROM gsv
WHERE VARIABLE_NAME = 'INNODB_LOCK_DEADLOCKS';

# Simulate a deadlock scenario.

CREATE TABLE t1 (a INT PRIMARY KEY, b INT NOT NULL) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1,2);
# Connection: con1
BEGIN;
# Take a shared lock on the existing record (1,2).
SET DEBUG_SYNC='write_row_noreplace SIGNAL insert1 WAIT_FOR select1';
INSERT INTO t1 VALUES (1,3);
# Connection: default
SET DEBUG_SYNC='now WAIT_FOR insert1';
SELECT * FROM t1 LOCK IN SHARE MODE;
a	b
1	2
# Attempt to get an exclusive lock for the same record.
SELECT * FROM t1 FOR UPDATE;
# Connection: con2
# Wait for lock attempt to be blocked.
SET DEBUG_SYNC='now SIGNAL select1';
# Connection: con1
ERROR 23000: Duplicate entry '1' for key 'PRIMARY'
# Attempt to get an exclusive lock for the same record.
INSERT INTO t1 VALUES (1,3) ON DUPLICATE KEY UPDATE b = b + 10;
# Connection: default
ERROR 40001: Deadlock found when trying to get lock; try restarting transaction
# Connection: con1
COMMIT;
# Connection: default

# Check if INNODB_LOCK_DEADLOCKS was incremented.

SELECT VARIABLE_VALUE INTO @deadlocks_2 FROM gsv
WHERE VARIABLE_NAME = 'INNODB_LOCK_DEADLOCKS';
SELECT @deadlocks_1 < @deadlocks_2;
@deadlocks_1 < @deadlocks_2
1
DROP TABLE t1;
#
# MYSQL-25: Add new InnoDB status variables Innodb_files_{open,opened,closed}
#
# Close any open tables and reset status variable values.
FLUSH STATUS;
FLUSH TABLES;
# Create each new table using its own .ibd file.
SET @old_innodb_file_per_table = @@GLOBAL.innodb_file_per_table;
SET GLOBAL innodb_file_per_table = ON;
# Record status values.
SELECT VARIABLE_VALUE INTO @files_opened FROM gsv
WHERE VARIABLE_NAME = 'INNODB_FILES_OPENED';
SELECT VARIABLE_VALUE INTO @files_closed FROM gsv
WHERE VARIABLE_NAME = 'INNODB_FILES_CLOSED';
SELECT VARIABLE_VALUE INTO @files_open FROM gsv
WHERE VARIABLE_NAME = 'INNODB_FILES_OPEN';
CREATE TABLE t1 (a INT) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
# Ensure that the counter of open files is incremented.
SELECT 1 AS STATUS FROM gsv
WHERE VARIABLE_NAME = 'INNODB_FILES_OPEN' AND VARIABLE_VALUE > @files_open;
STATUS
1
DROP TABLE t1;
FLUSH TABLES;
# Check if the open and close operations were accounted.
SELECT 1 AS STATUS FROM gsv
WHERE VARIABLE_NAME = 'INNODB_FILES_OPENED' AND VARIABLE_VALUE > @files_opened;
STATUS
1
SELECT 1 AS STATUS FROM gsv
WHERE VARIABLE_NAME = 'INNODB_FILES_CLOSED' AND VARIABLE_VALUE > @files_closed;
STATUS
1
SET GLOBAL innodb_file_per_table = @old_innodb_file_per_table;
#
# MYSQL-25: Add new InnoDB status variables Innodb_files_{open,opened,closed}
#
# Number of open, opened and closed files within the InnoDB tablespace.
#
# Close any open tables and reset status variable values.
FLUSH STATUS;
FLUSH TABLES;
# Create each new table using its own .ibd file.
SET @old_innodb_file_per_table = @@GLOBAL.innodb_file_per_table;
SET GLOBAL innodb_file_per_table = ON;
# Record status values.
SELECT VARIABLE_VALUE INTO @files_opened FROM gsv
WHERE VARIABLE_NAME = 'INNODB_TABLESPACE_FILES_OPENED';
SELECT VARIABLE_VALUE INTO @files_closed FROM gsv
WHERE VARIABLE_NAME = 'INNODB_TABLESPACE_FILES_CLOSED';
SELECT VARIABLE_VALUE INTO @files_open FROM gsv
WHERE VARIABLE_NAME = 'INNODB_TABLESPACE_FILES_OPEN';
CREATE TABLE t1 (a INT) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
# Ensure that the counter of open files is incremented.
SELECT 1 AS STATUS FROM gsv
WHERE VARIABLE_NAME = 'INNODB_TABLESPACE_FILES_OPEN'
  AND VARIABLE_VALUE > @files_open;
STATUS
1
DROP TABLE t1;
FLUSH TABLES;
# Check if the open and close operations were accounted.
SELECT 1 AS STATUS FROM gsv
WHERE VARIABLE_NAME = 'INNODB_TABLESPACE_FILES_OPENED'
  AND VARIABLE_VALUE > @files_opened;
STATUS
1
SELECT 1 AS STATUS FROM gsv
WHERE VARIABLE_NAME = 'INNODB_TABLESPACE_FILES_CLOSED'
  AND VARIABLE_VALUE > @files_closed;
STATUS
1
SET GLOBAL innodb_file_per_table = @old_innodb_file_per_table;
#
# InnoDB status variables Innodb_page_{splits,merges,reorganizes}
#
SET @old_innodb_file_per_table = @@GLOBAL.innodb_file_per_table;
SET GLOBAL innodb_file_per_table = ON;
CREATE TABLE t1 (a BIGINT PRIMARY KEY, b VARCHAR(2048),
c VARCHAR(2048)) ENGINE=InnoDB;
SELECT VARIABLE_VALUE INTO @page_splits_1 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_SPLITS';
#
# Insert a set of records that won't fit on a single page,
# causing a page to be split.
#
INSERT INTO t1 VALUES(1, REPEAT('b', 2048), REPEAT('c', 2048));
INSERT INTO t1 VALUES(2, REPEAT('b', 2048), REPEAT('c', 2048));
INSERT INTO t1 VALUES(3, REPEAT('b', 2048), REPEAT('c', 2048));
INSERT INTO t1 VALUES(4, REPEAT('b', 2048), REPEAT('c', 2048));
SELECT VARIABLE_VALUE INTO @page_merges_1 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_MERGES';
SELECT VARIABLE_VALUE INTO @page_merges_succ_1 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_MERGES_SUCCEEDED';
SELECT VARIABLE_VALUE INTO @page_reorganizes_1 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_REORGANIZES';
#
# Reduce the size of a couple of records so that the page
# fill factor will be below the minimum threshold, causing
# the page to be merged.
#
UPDATE t1 SET b = 'b', c = 'c' WHERE a = 3;
UPDATE t1 SET b = 'b', c = 'c' WHERE a = 4;
SELECT VARIABLE_VALUE INTO @page_merges_2 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_MERGES';
SELECT VARIABLE_VALUE INTO @page_merges_succ_2 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_MERGES_SUCCEEDED';
SELECT VARIABLE_VALUE INTO @page_reorganizes_2 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_REORGANIZES';
SELECT VARIABLE_VALUE INTO @page_splits_2 FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_SPLITS';
#
# Ensure that the page split/merge/reorganize counters
# were incremented.
#
SELECT (@page_merges_2 - @page_merges_1) AS 'INNODB_PAGE_MERGES';
INNODB_PAGE_MERGES
1
SELECT (@page_merges_succ_2 - @page_merges_succ_1) AS 'INNODB_PAGE_MERGES_SUCCEEDED';
INNODB_PAGE_MERGES_SUCCEEDED
1
SELECT (@page_reorganizes_2 - @page_reorganizes_1) AS 'INNODB_PAGE_REORGANIZES';
INNODB_PAGE_REORGANIZES
1
SELECT (@page_splits_2 - @page_splits_1) AS 'INNODB_PAGE_SPLITS';
INNODB_PAGE_SPLITS
1
DROP TABLE t1;
#
# Export insert buffer statistics
#
SET @old_innodb_change_buffering_debug = @@innodb_change_buffering_debug;
SET GLOBAL innodb_change_buffering_debug = 1;
CREATE TABLE t1 (a INT AUTO_INCREMENT, b INT, c INT,
PRIMARY KEY (a), INDEX (b)) ENGINE=InnoDB;
# Collect status values for later comparison.
SELECT VARIABLE_VALUE INTO @merged_delete_marks FROM gsv
WHERE VARIABLE_NAME = 'INNODB_IBUF_MERGED_DELETE_MARKS';
SELECT VARIABLE_VALUE INTO @merged_inserts FROM gsv
WHERE VARIABLE_NAME = 'INNODB_IBUF_MERGED_INSERTS';
SELECT VARIABLE_VALUE INTO @merged_pages FROM gsv
WHERE VARIABLE_NAME = 'INNODB_IBUF_MERGED_PAGES';
# Populate table so that insert buffering is used.
INSERT INTO t1 VALUES (0, 1, 1);
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
# Perform changes that are buffered.
BEGIN;
DELETE FROM t1 WHERE a = 1;
INSERT INTO t1 VALUES (1, 2, 1);
SELECT b FROM t1 LIMIT 3;
b
1
1
1
ROLLBACK;
# Wait for status values to be updated.
DROP TABLE t1;
SET GLOBAL innodb_change_buffering_debug = @old_innodb_change_buffering_debug;
#
# Add counters for page_merges_succeeded and page_discards
#
CREATE TABLE t1 (a BIGINT AUTO_INCREMENT PRIMARY KEY, b VARCHAR(2048),
c VARCHAR(2048)) ENGINE=InnoDB;
# Populate table with a few pages worth of data.
INSERT INTO t1 VALUES(1, REPEAT('b', 2048), REPEAT('c', 2048));
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
INSERT INTO t1 SELECT 0,b,c FROM t1;
# Collect status values for later comparison.
SELECT VARIABLE_VALUE INTO @page_discard FROM gsv WHERE
VARIABLE_NAME = 'INNODB_PAGE_DISCARD';
# Delete all records from the right-most page.
DELETE FROM t1 WHERE a > 17 ORDER BY a;
# Wait for records to be purged.
# Wait for the page_discard status value to be updated.
DROP TABLE t1;
#
# Cleanup
#
SET GLOBAL innodb_file_per_table = @old_innodb_file_per_table;
DROP VIEW gsv;
